{"version":3,"sources":["store/uiStore.ts","store/postStore.ts","components/Posts/PostItem.tsx","store/userStore.ts","utils/fetchClient.ts","hooks/usePosts.ts","api/posts.ts","components/Loader/Loader.tsx","components/Posts/PostsList.tsx","api/users.ts","components/UserSelector.tsx","hooks/useUsers.ts","hooks/useDeleteComment.ts","api/comments.ts","components/Comments/CommentItem.tsx","hooks/useCreateComment.ts","components/Comments/NewCommentForm.tsx","hooks/useComments.ts","components/Comments/CommentsList.tsx","hooks/usePost.ts","components/Posts/PostDetails.tsx","components/Sidebar.tsx","App.tsx","index.tsx"],"names":["useUiStore","create","immer","devtools","set","isSidebarOpen","setIsSidebarOpen","status","isCommentOpen","setIsCommentOpen","usePostStore","selectedPost","selectPost","post","PostItem","state","id","title","className","type","onClick","useUserStore","selectedUser","selectUser","user","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","usePosts","userId","useQuery","queryFn","getByUserId","enabled","Loader","PostsList","posts","isLoading","isError","length","map","getAll","UserSelector","users","useState","isVisible","setIsVisible","openSidebar","cn","prevState","onBlur","name","role","u","href","String","onMouseDown","e","preventDefault","useDeleteComment","queryClient","useQueryClient","useMutation","mutationFn","comment","onMutate","a","postId","cancelQueries","previousComments","getQueryData","setQueryData","old","filter","t","CommentItem","mutate","email","useCreateComment","createNew","onSuccess","invalidateQueries","NewCommentForm","setName","setEmail","text","setText","isNameError","setIsNameError","isEmailError","setIsEmailError","isTextError","setIsTextError","mutateAsync","isAllFilled","isOneFilled","onReset","useCallback","onSubmit","newComment","htmlFor","placeholder","value","onChange","target","useComments","getByPostId","CommentsList","comments","openForm","isFormOpen","usePost","PostDetails","Sidebar","isOpen","App","QueryClient","ReactDOM","render","initialIsOpen","document","getElementById"],"mappings":"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","file":"static/js/main.86d7ec26.chunk.js","sourcesContent":["import { create } from 'zustand';\nimport { devtools } from 'zustand/middleware';\nimport { immer } from 'zustand/middleware/immer';\n\ninterface UiStore {\n  isSidebarOpen: boolean;\n  setIsSidebarOpen: (status: boolean) => void;\n  isCommentOpen: boolean;\n  setIsCommentOpen: (status: boolean) => void;\n}\n\nexport const useUiStore = create<UiStore>()(\n  immer(\n    devtools((set) => ({\n      isSidebarOpen: false,\n      setIsSidebarOpen: (status) => set({ isSidebarOpen: status }),\n      isCommentOpen: false,\n      setIsCommentOpen: (status) => set({ isCommentOpen: status }),\n    })),\n  ),\n);\n","import { create } from 'zustand';\nimport { devtools } from 'zustand/middleware';\nimport { immer } from 'zustand/middleware/immer';\nimport { Post } from '../types/Post';\n\ninterface PostStore {\n  selectedPost: Post | null;\n  selectPost: (post: Post) => void;\n}\n\nexport const usePostStore = create<PostStore>()(\n  immer(\n    devtools((set) => ({\n      selectedPost: null,\n      selectPost: (post) => set({ selectedPost: post }),\n    })),\n  ),\n);\n","import { FC } from 'react';\nimport { Post } from '../../types/Post';\nimport { useUiStore } from '../../store/uiStore';\nimport { usePostStore } from '../../store/postStore';\n\ntype Props = {\n  post: Post;\n};\nexport const PostItem: FC<Props> = ({ post }) => {\n  const setIsSidebarOpen = useUiStore((state) => state.setIsSidebarOpen);\n  const isSidebarOpen = useUiStore((state) => state.isSidebarOpen);\n  const selectPost = usePostStore((state) => state.selectPost);\n  const selectedPost = usePostStore((state) => state.selectedPost);\n\n  const onClose = () => {\n    setIsSidebarOpen(false);\n  };\n\n  const onOpen = () => {\n    if (isSidebarOpen) {\n      selectPost(post);\n    } else {\n      setIsSidebarOpen(true);\n      selectPost(post);\n    }\n  };\n\n  return (\n    <tr data-cy=\"Post\">\n      <td data-cy=\"PostId\">{post.id}</td>\n\n      <td data-cy=\"PostTitle\">{post.title}</td>\n\n      <td className=\"has-text-right is-vcentered\">\n        {isSidebarOpen && selectedPost?.id === post.id ? (\n          <button\n            type=\"button\"\n            data-cy=\"PostButton\"\n            className=\"button is-link\"\n            onClick={onClose}\n          >\n            Close\n          </button>\n        ) : (\n          <button\n            type=\"button\"\n            data-cy=\"PostButton\"\n            className=\"button is-link is-light\"\n            onClick={onOpen}\n          >\n            Open\n          </button>\n        )}\n      </td>\n    </tr>\n  );\n};\n","import { create } from 'zustand';\nimport { devtools } from 'zustand/middleware';\nimport { immer } from 'zustand/middleware/immer';\nimport { User } from '../types/User';\n\ninterface UserStore {\n  selectedUser: User | null;\n  selectUser: (user: User) => void;\n}\n\nexport const useUserStore = create<UserStore>()(\n  immer(\n    devtools((set) => ({\n      selectedUser: null,\n      selectUser: (user) => set({ selectedUser: user }),\n    })),\n  ),\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { useQuery } from '@tanstack/react-query';\nimport { getByUserId } from '../api/posts';\nimport { Post } from '../types/Post';\n\nexport const usePosts = (userId: number) => {\n  return useQuery<Post[]>(['posts', userId], {\n    queryFn: () => getByUserId(userId),\n    enabled: !!userId,\n  });\n};\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getByUserId = (userId: number): Promise<Post[]> => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getById = (postId: number): Promise<Post> => {\n  return client.get<Post>(`/posts/${postId}`);\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { FC } from 'react';\nimport { PostItem } from './PostItem';\nimport { useUserStore } from '../../store/userStore';\nimport { usePosts } from '../../hooks/usePosts';\nimport { Loader } from '../Loader';\n\nexport const PostsList: FC = () => {\n  const selectedUser = useUserStore((state) => state.selectedUser);\n  const { data: posts, isLoading, isError } = usePosts(selectedUser?.id || 0);\n\n  if (selectedUser === null) {\n    return <p data-cy=\"NoSelectedUser\">No user selected</p>;\n  }\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  if (isError) {\n    return (\n      <div className=\"notification is-danger\" data-cy=\"PostsLoadingError\">\n        Something went wrong!\n      </div>\n    );\n  }\n\n  if (posts.length === 0) {\n    return (\n      <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n        No posts yet\n      </div>\n    );\n  }\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <th />\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map((post) => (\n            <PostItem key={post.id} post={post} />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const getAll = (): Promise<User[]> => {\n  return client.get<User[]>('/users?limit=10');\n};\n\nexport const getById = (id: number): Promise<User> => {\n  return client.get<User>(`/users/${id}`);\n};\n","import { FC, MouseEvent, useState } from 'react';\nimport cn from 'classnames';\nimport { useUsers } from '../hooks/useUsers';\nimport { User } from '../types/User';\nimport { useUserStore } from '../store/userStore';\nimport { useUiStore } from '../store/uiStore';\n\nexport const UserSelector: FC = () => {\n  const { data: users, isError, isLoading } = useUsers();\n  const [isVisible, setIsVisible] = useState(false);\n  const user = useUserStore((state) => state.selectedUser);\n  const selectUser = useUserStore((state) => state.selectUser);\n  const openSidebar = useUiStore((state) => state.setIsSidebarOpen);\n\n  const onUserSelect = (usr: User) => {\n    selectUser(usr);\n    setIsVisible(false);\n    openSidebar(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn('dropdown', {\n        'is-active': isVisible,\n      })}\n    >\n      {isError && <p>Something went wrong</p>}\n      {users?.length === 0 && <p>No user to select</p>}\n      {users?.length !== 0 && !isError && (\n        <>\n          <div className=\"dropdown-trigger\">\n            <button\n              type=\"button\"\n              className=\"button\"\n              aria-haspopup=\"true\"\n              aria-controls=\"dropdown-menu\"\n              onClick={() => setIsVisible((prevState) => !prevState)}\n              onBlur={() => setIsVisible(false)}\n            >\n              {user ? <span>{user?.name}</span> : <span>Choose a user</span>}\n\n              <span className=\"icon is-small\">\n                <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n              </span>\n            </button>\n          </div>\n\n          {!isLoading && (\n            <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n              <div className=\"dropdown-content\">\n                {users.map((u) => (\n                  <a\n                    key={u.id}\n                    href={`#/${String(u.id)}`}\n                    className=\"dropdown-item\"\n                    onMouseDown={(e: MouseEvent) => {\n                      e.preventDefault();\n                      onUserSelect(u);\n                    }}\n                  >\n                    {u.name}\n                  </a>\n                ))}\n              </div>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import { useQuery } from '@tanstack/react-query';\nimport { getAll } from '../api/users';\nimport { User } from '../types/User';\n\nexport const useUsers = () => {\n  return useQuery<User[]>(['users'], getAll);\n};\n","import { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { deleteById } from '../api/comments';\nimport { Comment } from '../types/Comment';\n\nexport const useDeleteComment = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (comment: Comment) => deleteById(comment.id),\n    onMutate: async ({ postId, id }) => {\n      await queryClient.cancelQueries(['comments', postId]);\n\n      const previousComments: Comment[]\n        = queryClient.getQueryData<Comment[]>(['comments', postId]) || [];\n\n      queryClient.setQueryData<Comment[]>(['comments', postId], (old) => {\n        return old?.filter((t) => t.id !== id);\n      });\n\n      return { previousComments };\n    },\n  });\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getByPostId = (postId: number): Promise<Comment[]> => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteById = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n\nexport const createNew = (comment: Omit<Comment, 'id'>) => {\n  return client.post('/comments', comment);\n};\n","import { FC } from 'react';\nimport { Comment } from '../../types/Comment';\nimport { useDeleteComment } from '../../hooks/useDeleteComment';\n\ntype Props = {\n  comment: Comment;\n};\nexport const CommentItem: FC<Props> = ({ comment }) => {\n  const { mutate } = useDeleteComment();\n\n  const onDelete = () => {\n    mutate(comment);\n  };\n\n  return (\n    <article className=\"message is-small\" data-cy=\"Comment\">\n      <div className=\"message-header\">\n        <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n          {comment.name}\n        </a>\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={onDelete}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {comment.body}\n      </div>\n    </article>\n  );\n};\n","import { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { createNew } from '../api/comments';\nimport { Comment } from '../types/Comment';\n\nexport const useCreateComment = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (comment: Omit<Comment, 'id'>) => createNew(comment),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['comments']);\n    },\n  });\n};\n","import {\n  ChangeEvent, FC, FormEvent, useCallback, useState,\n} from 'react';\nimport cn from 'classnames';\nimport { useCreateComment } from '../../hooks/useCreateComment';\nimport { Comment } from '../../types/Comment';\n\ntype Props = {\n  postId: number;\n};\n\nexport const NewCommentForm: FC<Props> = ({ postId }) => {\n  const [name, setName] = useState<string>('');\n  const [email, setEmail] = useState<string>('');\n  const [text, setText] = useState<string>('');\n  const [isNameError, setIsNameError] = useState<boolean>(false);\n  const [isEmailError, setIsEmailError] = useState<boolean>(false);\n  const [isTextError, setIsTextError] = useState<boolean>(false);\n  const { mutateAsync, isLoading } = useCreateComment();\n\n  const isAllFilled = name && email && text;\n  const isOneFilled = name || email || text;\n\n  const onReset = useCallback(() => {\n    setName('');\n    setIsNameError(false);\n    setEmail('');\n    setIsEmailError(false);\n    setText('');\n    setIsTextError(false);\n  }, []);\n\n  const onSubmit = async (e: FormEvent) => {\n    e.preventDefault();\n    if (!isAllFilled) {\n      return;\n    }\n\n    const newComment: Omit<Comment, 'id'> = {\n      postId,\n      name,\n      email,\n      body: text,\n    };\n\n    try {\n      await mutateAsync(newComment);\n    } catch {\n      return;\n    }\n\n    onReset();\n  };\n\n  const onNameChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setIsNameError(false);\n    setName(e.target.value);\n  };\n\n  const onEmailChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setIsEmailError(false);\n    setEmail(e.target.value);\n  };\n\n  const onTextChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n    setIsTextError(false);\n    setText(e.target.value);\n  };\n\n  const onNameBlur = () => {\n    if (name === '') {\n      setIsNameError(true);\n    }\n  };\n\n  const onEmailBlur = () => {\n    if (email === '') {\n      setIsEmailError(true);\n    }\n  };\n\n  const onTextBlur = () => {\n    if (text === '') {\n      setIsTextError(true);\n    }\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={onSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', {\n              'is-danger': isNameError,\n            })}\n            value={name}\n            onChange={onNameChange}\n            onBlur={onNameBlur}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n          {isNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', {\n              'is-danger': isEmailError,\n            })}\n            value={email}\n            onChange={onEmailChange}\n            onBlur={onEmailBlur}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('textarea', {\n              'is-danger': isTextError,\n            })}\n            value={text}\n            onChange={onTextChange}\n            onBlur={onTextBlur}\n          />\n        </div>\n\n        {isTextError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {isOneFilled && (\n            /* eslint-disable-next-line react/button-has-type */\n            <button\n              type=\"reset\"\n              className=\"button is-link is-light\"\n              onClick={onReset}\n            >\n              Clear\n            </button>\n          )}\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useQuery } from '@tanstack/react-query';\nimport { getByPostId } from '../api/comments';\n\nexport const useComments = (postId: number) => {\n  return useQuery(['comments', postId], {\n    queryFn: () => getByPostId(postId),\n    enabled: !!postId,\n  });\n};\n","import { FC } from 'react';\nimport { CommentItem } from './CommentItem';\nimport { NewCommentForm } from './NewCommentForm';\nimport { useComments } from '../../hooks/useComments';\nimport { Loader } from '../Loader';\nimport { useUiStore } from '../../store/uiStore';\n\ntype Props = {\n  postId: number;\n};\n\nexport const CommentsList: FC<Props> = ({ postId }) => {\n  const { data: comments, isLoading, isError } = useComments(postId);\n  const openForm = useUiStore((state) => state.setIsCommentOpen);\n  const isFormOpen = useUiStore((state) => state.isCommentOpen);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  if (isError) {\n    return (\n      <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n        Something went wrong\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <p className=\"title is-4\">Comments:</p>\n\n      {comments.length > 0 ? (\n        comments.map((comment) => (\n          <CommentItem key={comment.id} comment={comment} />\n        ))\n      ) : (\n        <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n          No comments yet\n        </p>\n      )}\n      {!isFormOpen && (\n        <button\n          data-cy=\"WriteCommentButton\"\n          type=\"button\"\n          className=\"button is-link\"\n          onClick={() => openForm(true)}\n        >\n          Write a comment\n        </button>\n      )}\n      {isFormOpen && <NewCommentForm postId={postId} />}\n    </>\n  );\n};\n","import { useQuery } from '@tanstack/react-query';\nimport { getById } from '../api/posts';\nimport { Post } from '../types/Post';\n\nexport const usePost = (id: number) => {\n  return useQuery<Post>(['post', id], () => getById(id));\n};\n","import { FC } from 'react';\nimport { CommentsList } from '../Comments/CommentsList';\nimport { usePostStore } from '../../store/postStore';\nimport { usePost } from '../../hooks/usePost';\nimport { Loader } from '../Loader';\n\nexport const PostDetails: FC = () => {\n  const selectedPost = usePostStore((state) => state.selectedPost);\n  const { data: post, isLoading, isError } = usePost(selectedPost?.id || 0);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  if (isError) {\n    return (\n      <div className=\"notification is-danger\" data-cy=\"PostsLoadingError\">\n        Something went wrong!\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">{`#${post.id}: ${post.title}`}</h2>\n\n          <p data-cy=\"PostBody\">{post.body}</p>\n        </div>\n\n        <div className=\"block\">\n          <CommentsList postId={post.id} />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import cn from 'classnames';\nimport { PostDetails } from './Posts/PostDetails';\nimport { useUiStore } from '../store/uiStore';\n\nexport const Sidebar = () => {\n  const isOpen = useUiStore((state) => state.isSidebarOpen);\n\n  return (\n    <div\n      data-cy=\"Sidebar\"\n      className={cn('tile', 'is-parent', 'is-8-desktop', 'Sidebar', {\n        'Sidebar--open': isOpen,\n      })}\n    >\n      <div className=\"tile is-child box is-success \">\n        <PostDetails />\n      </div>\n    </div>\n  );\n};\n","import { FC } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { PostsList } from './components/Posts/PostsList';\nimport { UserSelector } from './components/UserSelector';\nimport { Sidebar } from './components/Sidebar';\n\nexport const App: FC = () => {\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                <PostsList />\n              </div>\n            </div>\n          </div>\n\n          <Sidebar />\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { ReactQueryDevtools } from '@tanstack/react-query-devtools';\nimport { QueryClientProvider, QueryClient } from '@tanstack/react-query';\nimport { App } from './App';\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <QueryClientProvider client={queryClient}>\n    <App />\n    <ReactQueryDevtools initialIsOpen={false} />\n  </QueryClientProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}